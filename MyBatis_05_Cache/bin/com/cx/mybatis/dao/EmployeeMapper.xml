<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace:名称空间;指定为借口的全类名 id:唯一标识 resultType:返回值类型 #{id}:从传递过来的参数中取出id 
	public Employee getEmpById(Integer id); -->
<mapper namespace="com.cx.mybatis.dao.EmployeeMapper">
	<!-- 
		eviction:缓存的回收策略
		•LRU  –最近最少使用的：移除最长时间不被使用的对象。
		•FIFO –先进先出：按对象进入缓存的顺序来移除它们。
		•SOFT –软引用：移除基于垃圾回收器状态和软引用规则的对象。
		•WEAK –弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
		•默认的是LRU。
		flushInterval：缓存刷新间隔
			缓存多长时间清空一次，默认是不清空，设置一个ms值
		readOnly：缓存是否只读  true只读 ：mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据
								mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快。
							 false非只读：mybatis觉得获取到的数据可能被修改
							 mybatis会用序列号和反序列化的技术克隆一份新的数据。安全，速度慢
		size：缓存中存放多少元素
		type:自定义缓存的全类名
			实现Cache接口即可
	 -->
	<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>

	<!-- public Map<Integer, Employee> getEmpByLastNameLikeReturnMap(String lastName); -->
	<select id="getEmpByLastNameLikeReturnMap" resultType="com.cx.mybatis.bean.Employee">
		select * from tbl_employee where last_name like #{lastName}
	</select>

	<!-- public Map<String, Object> getEmpByIdReturnMap(Integer id); -->
	<select id="getEmpByIdReturnMap" resultType="map">
		select * from tbl_employee where id = #{id}
	</select>


<!-- public List<Employee> getEmpsByLastNameLike(String lastName); -->
	<!--
		resultType:如果返回的类型是一个集合，要写集合中元素的类型
	-->
	<select id="getEmpsByLastNameLike" resultType="com.cx.mybatis.bean.Employee">
		select * from tbl_employee where last_name like #{lastName}
	</select>
	<!-- public Employee getEmpByMap(Map<String, Object> map); -->
	
	<select id="getEmpByMap" resultType="com.cx.mybatis.bean.Employee">
		select id,last_name,email,gender from ${tableName} where id
		=
		${id} and last_name = #{lastName}
	</select>
	
	<!-- public Employee getEmpByIdAndLastName(Integer id,String lastName); -->

	<select id="getEmpByIdAndLastName" resultType="com.cx.mybatis.bean.Employee">
		select id,last_name,email,gender from tbl_employee where id
		=
		#{id} and last_name = #{lastName}
	</select>

	<select id="getEmpById" resultType="com.cx.mybatis.bean.Employee"
		databaseId="mysql">
		select id,last_name,email,gender from tbl_employee where id
		=
		#{idabc}
	</select>
	<!-- parameterType:可以省略 获取自增主键的值： mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys(); 
		useGeneratedKeys:属性值设置为true,使用自增主键获取主键值策略 keyProperty：指定对应的主键属性,也就是mybatis获取到主键值以后,将这个值封装给JavaBean的哪个属性 -->
	<insert id="addEmployee" parameterType="com.cx.mybatis.bean.Employee"
		databaseId="mysql" useGeneratedKeys="true" keyProperty="id">
		insert into
		tbl_employee(last_name,email,gender)
		values(#{lastName},#{email},#{gender})
	</insert>

	<!-- Oracle不支持自增;使用序列来模拟自增 每次插入的数据库的主键都是从序列中拿到的值；如何获取到这个值：查询对应的序列中的nextval作为对象的id 
		Mybatis中使用selectKey来查询主键：属性keyPropety:查询出的主键值封装给javaBean的哪个属性 order属性的"BEFORE"，执行顺序 
		resultType：类型 Before运行顺序： 先运行查询id的sql：查出id封装给JavaBean的属性 nextval 再运行插入的sql 
		After的运行顺序： 先运行插入的sql(直接从序列中取出新值的id) 在运行获取当前id的sqlcurrval -->
	<update id="updateEmployee">
		update tbl_employee
		set last_name = #{lastName},email = #{email},gender = #{gender}
		where id = #{id}
	</update>

	<delete id="delete">
		delete from tbl_employee where id=#{id}
	</delete>
</mapper>